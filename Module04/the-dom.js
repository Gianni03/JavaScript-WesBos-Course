function init() {
  const p = document.querySelector('p');
  console.log(p);
}

document.addEventListener('DOMContentLoaded', init);
// esto es lo mismo que hacer window.onload = init; lo que pasa es que el addEventListener es m√°s moderno y se puede agregar m√°s de un evento a un elemento. eso lo que hace es que cuando se carga el DOM se ejecuta la funci√≥n init por lo que no es necesario poner el script al final del body ni poner el defer en el script del head.

// seleccionar elementos
// querySelector y querySelectorAll, estos m√©todos permiten seleccionar elementos del DOM de la misma forma que lo hacemos con CSS. y generan un nodeList que es un array-like object, pero no es un array, por lo que no tiene los m√©todos de los arrays, pero se puede convertir a un array con Array.from() o con el spread operator.

// getElementById y getElementsByClassName, estos m√©todos son m√°s antiguos y no son tan flexibles como los querySelector, pero siguen siendo √∫tiles. getElementById devuelve un solo elemento y getElementsByClassName devuelve un HTMLCollection que es un array-like object.

const divs = document.querySelectorAll('div');
console.log(divs);

const heading = document.querySelector('h2');
console.log(heading.innerText);
console.log(heading.textContent);
// innerText devuelve el texto visible en el elemento, esto incluye si hay alguna etiqueta stylr y textContent devuelve todo el texto incluyendo los espacios en blanco.

const pizzaList = document.querySelector('.pizza');
console.log(pizzaList.textContent);
// pizzaList.textContent = `${pizzaList.textContent} üçï`;
pizzaList.insertAdjacentText('afterbegin', 'üçï');
// insertAdjacentText es un m√©todo que permite insertar texto en un elemento antes o despu√©s de otro elemento. las opciones son beforebegin, afterbegin, beforeend y afterend.
